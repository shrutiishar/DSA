//dequeue
#include <stdio.h>
#include <stdlib.h>
#define MAX 10

int insertrear(int arr[], int f, int r);
int insertfront(int arr[], int f, int r);
int deletefront(int arr[], int f, int r);
int deleterear(int arr[], int f, int r);
void display(int arr[], int f, int r);

int main() {
    int arr[MAX];
    int f = -1, r = -1;
    int ch;
    
    do {
        printf("Enter the value of ch (1: insert front, 2: insert rear, 3: delete front, 4: delete rear, 5: display, 0: exit): ");
        scanf("%d", &ch);
        switch(ch) {
            case 1:
                f = insertfront(arr, f, r);
                break;
            case 2:
                r = insertrear(arr, f, r);
                break;
            case 3:
                f = deletefront(arr, f, r);
                break;
            case 4:
                r = deleterear(arr, f, r);
                break;
            case 5:
                display(arr, f, r);
                break;
            case 0:
                exit(0);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while(ch != 0);
    
    return 0;
}

int insertfront(int arr[MAX], int f, int r) {
    int x;
    printf("Enter value to insert at front: ");
    scanf("%d", &x);
    
    if ((f == 0 && r == MAX - 1) || (f == r + 1)) {
        printf("Queue is full\n");
        return f; // No change
    } else if (f == -1 && r == -1) { // Empty queue
        f = 0;
        r = 0;
    } else if (f == 0) { // Wrap around
        f = MAX - 1;
    } else {
        f--;
    }
    arr[f] = x; // Insert at front
    return f;
}

int insertrear(int arr[MAX], int f, int r) {
    int x;
    printf("Enter value to insert at rear: ");
    scanf("%d", &x);
    
    if ((f == 0 && r == MAX - 1) || (f == r + 1)) {
        printf("Queue is full\n");
        return r; // No change
    } else if (r == -1 && f == -1) { // Empty queue
        f = 0;
        r = 0;
    } else if (r == MAX - 1) { // Wrap around
        r = 0;
    } else {
        r++;
    }
    arr[r] = x; // Insert at rear
    return r;
}

int deletefront(int arr[MAX], int f, int r) {
    if (f == -1) { // Empty queue
        printf("Queue is empty\n");
        return f; // No change
    } else {
        printf("The deleted element is %d\n", arr[f]);
        if (f == r) { // Queue becomes empty
            f = -1;
            r = -1;
        } else if (f == MAX - 1) { // Wrap around
            f = 0;
        } else {
            f++;
        }
        return f;
    }
}

int deleterear(int arr[MAX], int f, int r) {
    if (r == -1) { // Empty queue
        printf("Queue is empty\n");
        return r; // No change
    } else {
        printf("The deleted element is %d\n", arr[r]);
        if (f == r) { // Queue becomes empty
            f = -1;
            r = -1;
        } else if (r == 0) { // Wrap around
            r = MAX - 1;
        } else {
            r--;
        }
        return r;
    }
}

void display(int arr[MAX], int f, int r) {
    if (f == -1) { // Empty queue
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        int i = f;
        while (1) {
            printf("%d ", arr[i]);
            if (i == r) break; // Stop if we reach the rear
            i = (i + 1) % MAX; // Move to the next element
        }
        printf("\n");
    }
}
